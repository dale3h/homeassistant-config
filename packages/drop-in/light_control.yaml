################################################################
## Packages / Light Control
################################################################

################################################
## Customize
################################################

homeassistant:
  customize:
    ################################################
    ## Node Anchors
    ################################################

    package.node_anchors:
      customize: &customize
        package: 'light_control'

      expose: &expose
        <<: *customize
        haaska_hidden: false
        homebridge_hidden: false

    ################################################
    ## Script
    ################################################

    script.light_control:
      <<: *customize
      friendly_name: "Light Control"
      hidden: true

    script.light_control_off:
      <<: *customize
      friendly_name: "Light Control Off"
      hidden: true

    script.light_control_off_flash:
      <<: *customize
      friendly_name: "Light Control Off Flash"
      hidden: true

    script.light_control_off_transition:
      <<: *customize
      friendly_name: "Light Control Off Transition"
      hidden: true

    script.light_control_on:
      <<: *customize
      friendly_name: "Light Control On"
      hidden: true

    script.light_control_on_color_name:
      <<: *customize
      friendly_name: "Light Control On Color Name"
      hidden: true

    script.light_control_on_flash:
      <<: *customize
      friendly_name: "Light Control On Flash"
      hidden: true

    script.light_control_on_transition:
      <<: *customize
      friendly_name: "Light Control On Transition"
      hidden: true

################################################
## Script
################################################

script:
  light_control:
    sequence:
      - service_template: >-
          {% if state is not defined %}
            {% set state = 'off' if is_state('binary_sensor.' ~ entity_id.split('.', 1)[1] ~ '_expected_state', 'off') else 'on' %}
          {% endif %}

          {% if state == 'off' %}
            script.light_control_off{{ '_flash' if flash is defined else ('_transition' if transition is defined) }}
          {% else %}
            script.light_control_on{{ '_color_name' if color_name is defined else ('_flash' if flash is defined else ('_transition' if transition is defined)) }}
          {% endif %}
        data_template:
          entity_id: "{{ entity_id }}"
          brightness: >-
            {% set brightness_entity = entity_id.split('.', 1)[1] ~ '_brightness' %}

            {% if brightness is defined and brightness|int(-1) != -1 %}
              {{ brightness|int }}
            {% elif states.input_number[brightness_entity] is not none %}
              {{ states('input_number.' ~ brightness_entity)|int }}
            {% elif states.sensor[brightness_entity] is not none %}
              {{ states('sensor.' ~ brightness_entity)|int }}
            {% elif states.input_number.global_brightness is not none %}
              {{ states('input_number.global_brightness')|int }}
            {% elif states.sensor.global_brightness is not none %}
              {{ states('sensor.global_brightness')|int }}
            {% else %}
              255
            {% endif %}
          color_temp: >-
            {% if color_temp is defined and color_temp|int(-1) != -1 %}
              {{ color_temp|int }}
            {% else %}
              {{ (states.light[entity_id.split('.', 1)[1]].attributes|default).color_temp|default(370) }}
            {% endif %}
          flash: "{{ flash }}"
          transition: "{{ transition }}"
          color_name: "{{ color_name|default(none) }}"
          # profile: "{{ profile }}"
          # rgb_color: "{{ rgb_color }}"
          # white_value: "{{ white_value }}"
          # xy_color: "{{ xy_color }}"

  light_control_on:
    sequence:
      - service: light.turn_on
        data_template: &light_control_on
          entity_id: "{{ entity_id }}"
          brightness: "{{ brightness }}"
          color_temp: "{{ color_temp }}"
          # color_name: "{{ color_name }}"
          # profile: "{{ profile }}"
          # rgb_color: "{{ rgb_color }}"
          # white_value: "{{ white_value }}"
          # xy_color: "{{ xy_color }}"

  light_control_on_color_name:
    sequence:
      - service: light.turn_on
        data_template:
          <<: *light_control_on
          color_name: "{{ color_name }}"

  light_control_on_flash:
    sequence:
      - service: light.turn_on
        data_template:
          <<: *light_control_on
          flash: "{{ flash }}"

  light_control_on_transition:
    sequence:
      - service: light.turn_on
        data_template:
          <<: *light_control_on
          transition: "{{ transition }}"

  light_control_off:
    sequence:
      - service: light.turn_off
        data_template: &light_control_off
          entity_id: "{{ entity_id }}"

  light_control_off_flash:
    sequence:
      - service: light.turn_off
        data_template:
          <<: *light_control_off
          flash: "{{ flash }}"

  light_control_off_transition:
    sequence:
      - service: light.turn_off
        data_template:
          <<: *light_control_off
          transition: "{{ transition }}"
